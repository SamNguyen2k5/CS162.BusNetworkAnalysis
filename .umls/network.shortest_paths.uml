@startuml network
!theme vibrant
!pragma useIntermediatePackages false
skinparam linetype polyline

class network.shortest_paths.NetworkDijkstra {
  +src: int
  +property INFINITY: float
  +property dists: Dict[int, float]
  +property pars: Dict[int, int]
  +property count_paths: list[int]
  +property search_space: Dict[int, float]
  +from_net(self, net: Network, src: int)
}

class network.shortest_paths.NetworkAnalysisBetweenness {
  +property scores: Dict[int, int]
  +from_net(net: Network, dijkstra_engine: NetworkDijkstra)
  +top_scores() -> list[int]
}

class network.shortest_paths.NetworkBidirectionalDijkstra {
  +property search_space: Dict[int, float]
  +from_net(self, net: Network)
  +path(src: int, dest: int) -> tuple[float, list[NetworkConnector]]
}

class network.shortest_paths.contraction_hierarchies.NetworkContractionHierarchies {
  +property no_shortcuts: int
  +property level: Dict[int, int]
  +property search_space: Dict[int, float]
  +from_net(self, net: Network)
  +dist(src: int, dest: int) -> float
  +raw_path(src: int, dest: int) -> tuple[float, list[NetworkConnectorTreeNode]]
  +path(src: int, dest: int) -> tuple[float, list[NetworkConnector]]
}

class network.shortest_paths.contraction_hierarchies.random.NetworkContractionHierarchiesRandom {
}

class network.shortest_paths.contraction_hierarchies.periodic_ED.NetworkContractionHierarchiesPeriodicED {
}

class network.shortest_paths.contraction_hierarchies.lazy_ED.NetworkContractionHierarchiesLazyED {
}

NetworkAnalysisBetweenness --d-> NetworkDijkstra: uses
NetworkContractionHierarchiesRandom .-d-|> NetworkContractionHierarchies: implements
NetworkContractionHierarchiesPeriodicED .-d-|> NetworkContractionHierarchies: implements
NetworkContractionHierarchiesLazyED .-d-|> NetworkContractionHierarchies: implements
NetworkContractionHierarchies .-d-|> NetworkBidirectionalDijkstra

NetworkBidirectionalDijkstra -[hidden]-> NetworkAnalysisBetweenness

footer Generated by //py2puml//
@enduml