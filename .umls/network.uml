@startuml network
!theme vibrant
!pragma useIntermediatePackages false
skinparam linetype polyline

class network.NetworkConnector {
  +property src: int
  +property dest: int
  +weight() -> float = NotImplementedError {abstract}
}

class network.Network<TNode, TNetworkConnector> {
  +property nodes: Dict[int, TNode]
  +property adjs: Dict[int, TNetworkConnector]
}

class network.shortest_paths.NetworkDijkstra {
  +src: int
  +property INFINITY: float
  +property dists: Dict[int, float]
  +property pars: Dict[int, int]
  +property count_paths: list[int]
  +property search_space: Dict[int, float]
  +from_net(self, net: Network, src: int)
}

class network.shortest_paths.NetworkAnalysisBetweenness {
  +property scores: Dict[int, int]
  +from_net(net: Network, dijkstra_engine: NetworkDijkstra)
  +top_scores() -> list[int]
}

class bus.busnet.BusNetworkConnector {
  +route_ids: tuple[int, int]
  +time: float
  +length: float
  +real_path: list[tuple[float, float]]
  +weight() -> float
}

class bus.busnet.BusNetwork as "BusNetwork = Network[Stop, BusNetworkConnector]" {
  +from_json(file: str) -> BusNetwork
  +from_ndjsons(sides_set_type: str = "spatial", **kwargs) -> BusNetwork
  +to_dict() -> dict
  +to_json(file: str) -> None
}

class bus.busnet.BusNetworkDijkstra {
  +path_to_json(dest: int, file: str)
  +shortest_path_to_json(src: int, dest: int, file: str)
}

NetworkConnector o--r- Network: contains
Network <-r- NetworkDijkstra: uses

Network <|--d- BusNetwork : <<bind>>
NetworkConnector <|--d- BusNetworkConnector
NetworkDijkstra <|--d- BusNetworkDijkstra

BusNetworkConnector o--r- BusNetwork: contains

NetworkAnalysisBetweenness --d-> NetworkDijkstra: uses
NetworkAnalysisBetweenness --d-> Network: analyses

footer Generated by //py2puml//
@enduml